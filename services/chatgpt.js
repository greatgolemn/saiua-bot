
const { getSession, resetSession } = require('./session');
const { getRecipesFromSheet, appendOrderToSheet } = require('./sheets');
const { sendLineNotify } = require('./lineNotify');
const { formatOrderText } = require('../utils/orderFormatter');
const axios = require('axios');
const { OpenAI } = require('openai');

const PAGE_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function handleMessage(senderId, text) {
  const session = getSession(senderId);
  const step = session.step;
  const data = session.data;

  const send = async (msg) => {
    await axios.post(`https://graph.facebook.com/v18.0/me/messages?access_token=${PAGE_TOKEN}`, {
      recipient: { id: senderId },
      message: { text: msg },
    });
  };

  if (step === 0) {
    const recipes = await getRecipesFromSheet();
    if (recipes.length === 0) {
      await send('‚ùå ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
      return;
    }
    session.availableRecipes = recipes;
    const list = recipes.map((r, i) => `${i + 1}. ${r}`).join('\n');
    await send('üçΩÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß:\n' + list);
    session.step++;
  } else if (step === 1) {
    const index = parseInt(text.trim()) - 1;
    const recipes = session.availableRecipes;
    if (isNaN(index) || index < 0 || index >= recipes.length) {
      await send('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return;
    }
    data.recipe = recipes[index];
    await send('üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏ô/‡∏ã‡∏µ‡∏•‡∏™‡∏∏‡∏ç‡∏ç‡∏≤‡∏Å‡∏≤‡∏®)?');
    session.step++;
  } else if (step === 2) {
    data.type = text;
    await send('‚öñÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡πà‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°?');
    session.step++;
  } else if (step === 3) {
    data.amount = text;
    await send('üßë ‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
    session.step++;
  } else if (step === 4) {
    data.nickname = text;
    await send('üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠?');
    session.step++;
  } else if (step === 5) {
    data.phone = text;
    await send('üöö ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô? (‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö/‡∏à‡∏±‡∏î‡∏™‡πà‡∏á)');
    session.step++;
  } else if (step === 6) {
    data.delivery = text;
    await send('üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á');
    session.step++;
  } else if (step === 7) {
    data.location = text;
    await send('üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á?');
    session.step++;
  } else if (step === 8) {
    data.datetime = text;
    await send('üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô? (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‚Äú‡πÑ‡∏°‡πà‡∏°‡∏µ‚Äù)');
    session.step++;
  } else if (step === 9) {
    data.notes = text;
    const summary = formatOrderText(data);
    await send('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n' + summary + '\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    session.step++;
  } else if (step === 10) {
    if (text.toLowerCase() === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
      await appendOrderToSheet(data);
      const summary = formatOrderText(data);
      await send('‚úÖ ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö!');
      await sendLineNotify('üì• ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà:\n' + summary);
      resetSession(senderId);
    } else {
      await send('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ');
      resetSession(senderId);
    }
  } else {
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß‡∏ö‡πà‡∏≤‡∏ß‡∏ô‡πâ‡∏≠‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á',
        },
        { role: 'user', content: text },
      ],
    });

    const reply = completion.choices[0].message.content;
    await send(reply);
  }
}

module.exports = { handleMessage };
